from intersection import *


def linearRegionSearch(query, root, result):

    if segIntRec(query, root.region):
        if root.isleaf:
            result.extend(root.poi)
        else:
            for child in root.pointers:
                linearRegionSearch(query, child, result)
    else:
        return


def segIntInEnc(TR, encSide):
    """
    determining whether two segments intersect in encrypted environment

    :param TR: the trapdoor generated by user, a dictionary contained 7 elements:
    "ext1_q1*", "ext1_q2*", "ext2_q1*", "ext2_q2*", "ext3_q1*", "ext3_q2*", "ext3_Du*"

    :param encSide: the encrypted side of one rectangle, the encSide stored in encinfo of tree node
    encSide contained 7 elements: "ext1_p1*", "ext1_p2*", "ext2_p1*",
    "ext2_p2*", "ext3_p1*", "ext3_p2*", "ext3_Ds*"
    :return: True or False
    """

    encLambda1 = encSide["ext1_p1*"][0] @ TR["ext2_q2*"][0] + encSide["ext1_p1*"][1] @ TR["ext2_q2*"][1]\
                 - (encSide["ext1_p1*"][0] @ TR["ext2_q1*"][0] + encSide["ext1_p1*"][1] @ TR["ext2_q1*"][1])

    encLambda2 = encSide["ext1_p2*"][0] @ TR["ext2_q2*"][0] + encSide["ext1_p2*"][1] @ TR["ext2_q2*"][1] \
                 - (encSide["ext1_p2*"][0] @ TR["ext2_q1*"][0] + encSide["ext1_p2*"][1] @ TR["ext2_q1*"][1])

    encLambda3 = encSide["ext2_p1*"][0] @ TR["ext1_q1*"][0] + encSide["ext2_p1*"][1] @ TR["ext1_q1*"][1] \
                 - (encSide["ext2_p2*"][0] @ TR["ext1_q1*"][0] + encSide["ext2_p2*"][1] @ TR["ext1_q1*"][1])

    encLambda4 = encSide["ext2_p1*"][0] @ TR["ext1_q2*"][0] + encSide["ext2_p1*"][1] @ TR["ext1_q2*"][1] \
                 - (encSide["ext2_p2*"][0] @ TR["ext1_q2*"][0] + encSide["ext2_p2*"][1] @ TR["ext1_q2*"][1])

    if abs(encLambda1) < 1e-9:
        return TR["ext3_Du*"][0] @ encSide["ext3_p1*"][0] + TR["ext3_Du*"][1] @ encSide["ext3_p1*"][1] <= 1e-9
    elif abs(encLambda2) < 1e-9:
        return TR["ext3_Du*"][0] @ encSide["ext3_p2*"][0] + TR["ext3_Du*"][1] @ encSide["ext3_p2*"][1] <= 1e-9
    elif abs(encLambda3) < 1e-9:
        return encSide["ext3_Ds*"][0] @ TR["ext3_q1*"][0] + encSide["ext3_Ds*"][1] @ TR["ext3_q1*"][1] <= 1e-9
    elif abs(encLambda4) < 1e-9:
        return encSide["ext3_Ds*"][0] @ TR["ext3_q2*"][0] + encSide["ext3_Ds*"][1] @ TR["ext3_q2*"][1] <= 1e-9

    elif encLambda1 * encLambda2 < -1e-9 and encLambda3 * encLambda4 < -1e-9:
        return True

    return False


def segIntRecInEnc(TR, encInfo):
    """
    determining whether a encrypted segments intersect with a encrypted rectangle

    :param TR: the trapdoor generated by user, a dictionary contained 7 elements:
    "ext1_q1*", "ext1_q2*", "ext2_q1*", "ext2_q2*", "ext3_q1*", "ext3_q2*", "ext3_Du*"

    :param encInfo: a list stored 4 encrypted sides, each of them contained 7 elements:
    "ext1_p1*", "ext1_p2*", "ext2_p1*", "ext2_p2*", "ext3_p1*", "ext3_p2*", "ext3_Ds*"
    :return: True or False
    """

    for i in range(4):
        if segIntInEnc(TR, encInfo[i]):
            return True

    s1, s2, s3, s4 = encInfo[0], encInfo[1], encInfo[2], encInfo[3]

    encGamma1 = s1["ext2_p2*"][0] @ TR["ext1_q1*"][0] + s1["ext2_p2*"][1] @ TR["ext1_q1*"][1] \
                - (s1["ext2_p1*"][0] @ TR["ext1_q1*"][0] + s1["ext2_p1*"][1] @ TR["ext1_q1*"][1])

    encGamma2 = s3["ext2_p2*"][0] @ TR["ext1_q1*"][0] + s3["ext2_p2*"][1] @ TR["ext1_q1*"][1] \
                - (s3["ext2_p1*"][0] @ TR["ext1_q1*"][0] + s3["ext2_p1*"][1] @ TR["ext1_q1*"][1])

    encGamma3 = s4["ext2_p2*"][0] @ TR["ext1_q1*"][0] + s4["ext2_p2*"][1] @ TR["ext1_q1*"][1] \
                - (s4["ext2_p1*"][0] @ TR["ext1_q1*"][0] + s4["ext2_p1*"][1] @ TR["ext1_q1*"][1])

    encGamma4 = s2["ext2_p2*"][0] @ TR["ext1_q1*"][0] + s2["ext2_p2*"][1] @ TR["ext1_q1*"][1] \
                - (s2["ext2_p1*"][0] @ TR["ext1_q1*"][0] + s2["ext2_p1*"][1] @ TR["ext1_q1*"][1])

    return encGamma1 * encGamma2 < -1e-9 and encGamma3 * encGamma4 < -1e-9


def secureSearch(TR, root, result):
    """

    :param TR: the trapdoor generated by user
    :param root: the encrypted quadtree
    :param result:
    :return:
    """

    if segIntRecInEnc(TR, root.encInfo):
        if root.isleaf:
            result.extend(root.poi)
        else:
            for child in root.pointers:
                secureSearch(TR, child, result)
    else:
        return
